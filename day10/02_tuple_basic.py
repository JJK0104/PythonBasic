

'''
* 튜플 (Tuple)

- 튜플은 값의 집합이라는 측면에서 리스트와 유사하지만 값을 한번 저장한 후에는
  내부 요소의 편집이 불가능합니다.

- 튜플은 상수리스트라고도 부르며 ()를 사용하여 표현합니다.

- 튜플을 만들 때 ()을 생략할 수 있다

-요소가 한개밖에 없는 튜플은 뒤에 ,를 찍어서 표현
ex) tu = "홍길동", or ("홍길동",)

- index, count

- 빈 튜플 만들 수 있는 유일한 방법
   tu = tuple()
'''
points = (86, 97, 23, 45, 100) 
print(type(points)) # <class 'tuple'>

sum = 0
for p in points:
    sum += p
print("총점: %d점, 평균: %.2f점" % (sum, sum / len(points)))

# 튜플을 만들 때는 ()를 생략할 수 있습니다.
tu = 1, 3, 5, 7, 9
print(type(tu)) # <class 'tuple'>

li = ["홍길동"]
print(type(li)) # <class 'list'>

# 요소가 단 한개밖에 없는 튜플은 일반 수치형데이터나 문자열과 구분되지
# 않기 때문에 요소 뒤에 콤마를 하나 찍어서 표현합니다.
tu = "홍길동", #or ("홍길동",)
print(type(tu)) # <class 'tuple'>
print(len(tu)) # 1

tu = ("하나") # 튜플로 사용하려면 tu = ("하나",) 로 해야한다
print(type(tu)) #<class 'str'>

'''
- 튜플의 요소를 읽거나 범위를 추출하거나 +, * 연산을 하는 것은 가능합니다.
- 그러나 튜플의 내부 요소를 변경하거나 삭제하는 것은 불가능합니다.
- 문자열처럼
'''
print("-" * 40)

# 튜플로 가능한 문법
tu = 2, 4, 6, 8

print(tu[3]) # 8
print(tu[1:3])# (4, 6)
print(tu + (20, 21)) # (2, 4, 6, 8, 20, 21)
print(tu * 2) # (2, 4, 6, 8, 2, 4, 6, 8)

print(tu) # (2, 4, 6, 8)

# 튜플로 불가능한 문법
# tu[2] = 22
# tu.append(22)
# del(tu[1])

# 튜플이 제공하는 메서드(index(), count())
tu = 1,1,1,3,3,5,7,5,5
print(tu.index(5)) #5의 index 번호 알아내기 -> 5
print(tu.count(1)) #1 몇번 나왔냐 -> 3

'''
* 튜플을 사용해야 하는 이유

- 튜플로 가능한 일은 리스트로도 모두 가능합니다. 
  리스트는 튜플에 비해 요소를 변경하는 편집도 가능합니다.
- 결국 리스트는 튜플의 기능을 모두 포괄하는 더 큰 범위의
 타입이지만   튜플을 사용해야 하는 이유가 있습니다.

1. 비용의 차이: 리스트는 변경의 가능성을 대비해야 
하므로 더 많은 메모리를 소모하고 속도도 느립니다. 
   이에 비해 튜플은 값의 집합만 표현할 뿐 바뀔 일이 
   없으므로 내부구조가 단순하고 속도도 빠릅니다.
   
2. 데이터 안정성: 리스트는 실수로 내부 데이터가 
의도치 않게 바뀔 수 있지만 튜플은 한번 정해지면 
바꿀 수 없어 실수할 위험이 적습니다. 
  데이터베이스나 네트워크에서 얻은 데이터는 단순히 
  참조만 하면 될 뿐 편집할 일이 없으므로 
  리스트보다 튜플로 처리하는 것이 안전합니다.
 
3. 리스트와 상호 변경 가능: 리스트와 튜플은 값 
변경 가능성 여부만 다를 뿐  구조가 비슷해 상호변경이 
 가능합니다. 
리스트를 튜플로 변경할 때는 tuple()함수를 사용하며 
  반대는 list()함수를 사용합니다.  
'''
print("-" * 40)

p = [22, 33, 44, 55, 66]

p = tuple(p)
print(type(p)) # <class 'tuple'>
print(p) # (22, 33, 44, 55, 66)
# p[1] = 99 에러난다. 튜플은 변경 불가능하기 때문에

p = list(p) 
print(type(p)) # <class 'list'>
p[3] = 100 
print(p) # [22, 33, 44, 100, 66]


# 빈 튜플 만들 수 있는 유일한 방법
tu = tuple()
print(tu) # ()



