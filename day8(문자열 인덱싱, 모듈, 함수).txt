
day 8-1)
* 문자열 슬라이싱

- 문자열 내부의 데이터를 부분적으로 추출할 때 사용하는 방법입니다.
ex) 문자열데이터[begin:end:step]

- range함수처럼 시작인덱스는 포함하지만 끝인덱스는 포함하지 않습니다.
- 언어는 대부분 이상 ~ 미만 이다



day 8-2)
문자열 메서드 find(): 문자열 내부에 특정 '문자'를 검색하여 
해당 문자의 인덱스를 알려줌. 앞에서부터 검색하여 찾음. -> 앞에 거 하나만 찾았으면 뒤에거는 안 찾음
해당 문자가 없으면 -1을 반환함
ex) print(s.find('o'))

메서드 rfind -> 뒤에서부터

# 메서드 index(): find와 효과는 같지만 찾는 단어가 없을 경우 에러 발생. find는 -1
print(s.index("r"))
# print(s.index("x")) -> 가끔 에러가 필요할 때 쓴다
# 메서드 count(): 문자열 내부에 찾는 단어의 출현 횟수를 알려줌.

day 8-3) 
- in 키워드 : print("a" in s) #True    

- startswith() 메서드는 문자열이 특정 단어,문자열로 시작하는지의 여부를
  검사하여 True, False를 반환합니다.

- endswith() 메서드는 반대로 특정 단어,문자열로 끝나는지의 여부를 검사합니다.

- isalpha() - 모든 문자가 알파벳형태인지를 조사하여 True, False를 반환합니다.
- islower() - 모든 문자가 소문자인지를 조사하여 True, False를 반환합니다.
- isupper() - 모든 문자가 대문자인지를 조사하여 True, False를 반환합니다.
- isdecimal() - 모든 '문자'가 숫자인지를 조사하여 True, False를 반환합니다.
                 int에는 isdecimal() 못 쓴다. 문자열에 쓰는 거다.

day 8-4) 
1. lstrip(): 문자열의 왼쪽 공백을 제거
2. rstrip(): 문자열의 오른쪽 공백을 제거
3. strip(): 문자열의 양쪽 공백을 모두 제거

day 8-5) 
- replace(): 특정 단어를 모두 찾아 새로운 단어로 일괄 대체합니다.
print(s2.replace("커피", "우유", 2)) #3번쨰 값을 주지 않으면 일괄대체, 3번쨰 값을 주면 앞에서부터 해당개수만 바꿈

# 문자열 내부에 \: line continue. 이때 \ 뒤에 공백이나 다른 거 있으면 안된다.
s = "파이썬 프로그래밍!! 파이썬은 문자열을 다루는 수많은 함수들을 \
제공합니다."
print(s)

s2 = '''파이썬 프로그래밍!! 파이썬은 문자열을 다루는 수많은 함수들을 
제공합니다.'''
print(s2) # 위에처럼 하면 '제공합니다'가 다른 줄로 나온다.

day 8-6) * 문자열 분할 메서드 split()

day 8-7) 
* 문자열 형태 변경 메서드
1. lower(): 영문 알파벳을 모두 소문자로 변환
2. upper(): 영문 알파벳을 모두 대문자로 변환
3. swapcase(): 영문 대소문자를 반대로 뒤집음
4. capitalize(): 문장의 시작문자만 대문자로 나머지는 소문자로 변경
5. title(): 단어의 각 첫글자만 대문자로 나머지는 소문자로 변경