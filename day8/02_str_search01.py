'''
# 내장함수 : len(), 
# 메서드 : find(), rfind(), index(), count()

* 문자열 관리 함수, 메서드

- 함수: 모듈 내에서 공용적으로 사용할 수 있는 기능

- 메서드: 클래스에 소속된 함수, 자료형을 밝히고 함수를 사용해야 함. 특별한 함수
  ex)
  문자열 메서드 find(): 문자열 내부에 특정 문자를 검색하여 
  해당 문자의 인덱스를 알려줌. 앞에서부터 검색하여 찾음.
  해당 문자가 없으면 -1을 반환함
  메서드는 자료형을 밝히고 함수를 사용해야 함. s에서 find해라
  그리고 s가 반드시 문자열이어야 한다. 
  s.find('r') , s.index('r')

- 문자열은 수치형 자료에 비해 복잡하고 데이터의 저장 개수도 가변적이어서
  파이썬에서는 문자열을 조작할 수 있는 편리한 함수와 메서드들을 제공하고
  있습니다.

# 메서드 index(): find와 효과는 같지만 찾는 단어가 없을 경우 에러 발생. find는 -1
  -> 가끔 에러가 필요할 때 쓴다


# 메서드 count(): 문자열 내부에 찾는 단어의 출현 횟수를 알려줌.
'''


'''
* 내장함수 range(begin, end, step) : 특정 범위의 순차적 리스트를 생성하는 함수

- 순차적으로 증가하는 정수 리스트를 만들 때 대괄호 안에 데이터를
  콤마로 일일히 나열하기보다는 range함수를 사용하여 쉽게 리스트를
   생성할 수 있습니다.

ex) range(시작값, 끝값, 증감값)
- 시작값은 포함하지만 끝값은 포함하지 않습니다.
*step이 1일 경우 생략 가능
- range(1, 5, 1) == range(1, 5) -> [1,2,3,4]
- range(3, 8, 2) -> [3,5,7]
*숫자 하나만 입력하면 그 값을 end로 보고 시작값을 0 으로 본다.
- range(6) == range(0,6,1)
'''

s = "python programming"
# 내장함수 len(): 시퀀스자료형의 내부 데이터 개수를 구함.
print(len(s)) # 18 -> python programming은 총 18개의 문자(공백도 포함)
p = [55, 66, 77, 88, 99]
print(len(p)) # 5
a = range(1,4)
print(a) # range(1, 4)
print(len(a)) # 3
b = [range(1,4)]
print(b) # [range(1, 4)]
print(len(b)) # 1
print(len(range(1, 1001))) # 1000

b = list(range(1,4))
print(b) # [1, 2, 3]
print(len(b)) # 3

# 문자열 메서드 find(): 문자열 내부에 특정 '문자'를 검색하여 
# 해당 문자의 인덱스를 알려줌. 앞에서부터 검색하여 찾음.
# 해당 문자가 없으면 -1을 반환함
# 메서드는 자료형을 밝히고 함수를 사용해야 함. s에서 find해라
# 그리고 s가 반드시 문자열이어야 한다. 
print(s.find('o')) # 앞에서부터 찾기 때문에 python의 o를 찾고 programming의 o는 안 찾음 -> 4
print(s.find("z")) # -1

# 메서드 rfind(): find와 같지만 뒤에서부터 검색함.
print(s.rfind("o")) # 뒤에서부터 찾기 때문에 programming의 o를 찾고 python의 o는 안 찾음 -> 9
print(s.find("z")) # -1
'''
- find, rfind는 '단어'를 검색할 경우 해당 단어가 문자열 내부에 존재할 시
  그 단어의 첫글자 인덱스번호를 알려줌, 없을 시 -1을 반환함.
'''
print(s.find("program")) # program이 있으면 p의 번호를 알려줌
print(s.find("hello"))

pw = "ff!f1234"

if pw.find("!") == -1:
    print("비밀번호에 반드시 !를 넣어주세요.")
else:
    print("비밀번호가 정상 등록되었습니다.")

user_id = "abc1234"

if len(user_id) < 6:
    print("id는 6글자 이상으로 작성하세요!")
else:
    print("id가 정상 등록되었습니다.")


# 메서드 index(): find와 효과는 같지만 찾는 단어가 없을 경우 에러 발생. find는 -1
print(s.index("r"))
# print(s.index("x")) -> 가끔 에러가 필요할 때 쓴다


# 메서드 count(): 문자열 내부에 찾는 단어의 출현 횟수를 알려줌.
message = """나는 바보가 아닌데 나를 자꾸 바보라고 부르는 것을 
참을 수 없어 나를 바보라고 부르지마라 나를 바보라는 것을 참을 수 있지만
바보라고 부르는 것은 참을 수 없어!"""

print("'바보'의 출현횟수:", message.count("바보"))






