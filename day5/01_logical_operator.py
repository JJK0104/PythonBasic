
'''
C언어에서 연산자 우선순위
1순위) () , [] , -> , . (왼쪽부터 차례대로 우선순위 높다... ()가 1짱)
2순위) 연산자 항의 개수가 적을수록 먼저 실행 ex) !1||0 여기서 !은 단항연산자, ||은 2항연산자
따라서 단항연산자 먼저 실행돼서 !1||0 => 0||0 => 0
3순위) 산술 > 관계 > 논리 > 대입
'''

'''
* 논리 연산자(&, |, and, or, not)

- 논리값의 연산을 수행하는 연산자입니다.

* &, and 연산자는 좌항과 우항의 조건식의 결과가
  모두 True일 경우에만 전체 결과를 True로 도출합니다.
'''

a = 3

if (a > 1) & (a < 10):
    print("a는 1보다 크고 10보다 작습니다.")
print("test!!")

# 파이썬은 위의 식을 연결해서 표현할 수 있습니다.
# 다른 언어는 안 된다
if 1 < a < 10:
    print("OK!")

# |, or 연산자는 좌항과 우항의 조건식의 결과가
# 하나만 True여도 전체결과를 True로 도출합니다.

b = 4

if (b == 2) | (b == 4):
    print("b는 2또는 4입니다.")

'''
* 단축 평가(short circuit) - and, or

- 논리 연산 수행시 좌항에서 전체결과가 판명날 경우
  우항 연산을 진행하지 않는 연산자입니다.

- and는 좌항에서 false가 나오면 우항과 무관하게 false
  or는 좌항에서 True가 나오면 우항과 무관하게 False

그럼 &, | 는 왜 쓰냐?
우항 논리식이 우리 프로그램의 중요한 코드일 때 쓴다
and, or 쓰면 쌩까버린다
'''
print("-" * 40)
c = 0

if (c == 0) or (10 / c == 5):
    print("에러 없이 통과함!")
# 한번에 주석처리 하기 : Ctrl + /
# if (c == 0) | (10 / c == 5):
#    print("에러 없이 통과함!")
# 10/0 은 불가능이므로 에러

# not연산자는 논리값을 반전시킵니다. (T->F, F->T)
print("-" * 40)

d = 10

if not d < 0: # d<0 의 논리값을 뒤집는다.
    print("d는 0보다 작지 않습니다.")

'''
- C언어에서는 정수 0을 False로 해석하고, 0이 아닌 모든 정수를
  True로 해석합니다.
- 파이썬에서도 C의 논리해석을 그대로 사용할 수 있습니다.
'''
print("-" * 40)
drink = 10

if not drink:
    print("음료수가 다 떨어졌습니다.")
else:
    print("음료수가", drink, "개 남았습니다.")

print("-" * 40)
print(int(False)) #0
print(int(True)) #1


